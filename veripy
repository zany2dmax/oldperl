#!/usr/bin/python
#
#   $Id: veripy,v 1.3 2004/05/04 14:14:16 john Exp $
#
# When finished, this program will attempt to show the differences between
# what's on disk and what is about to be installed from a set of RPMs.
#
# NOTES:
#
# o Possibly use the remaining RPMFILE_* flags in logic that determines
#   if configuration files are going to be replaced or not
#

import binascii, glob, md5, optparse, os, popen2, rpm, string, sys

from errno import *
from stat import *

def returnNameVerRel(filehdr, diskhdr):
   """Pass RPM headers and get back a space-delimited string in the form of
      "foo 1.0-1.ilo 2.0-1.ilo" where foo is the RPM name, "1.0" and "2.0" are
      the respective versions from the headers, and "1.ilo" is the release tag
      from each version. If None is passed instead of a RPM header from on
      disk, the respective version and release tags will contain an "X"
      instead."""

   name = filehdr["name"]
   pendvr = filehdr["version"] + "-" + filehdr["release"]
         
   if diskhdr: instvr = diskhdr["version"] + "-" + diskhdr["release"]
   else: instvr = "X"

   return name + " " + instvr + " " + pendvr

def verifyArgs(args):
   """Pass the list of RPM files from the command-line and return if the list
      is unique and all the files are valid RPMs. If two similar RPMs are
      passed, such as foo-1.0-1.noarch.rpm and foo-1.0-37.noarch.rpm, the
      program will exit with an error."""

   pending = {}
   for arg in args:
      if options.verbosity:
         print "debug: verifying", arg
    
      fhdr = returnHdrFromFile(arg)
      if fhdr is None:
         print "error: %s is not a valid RPM, exiting" % arg
         sys.exit(2)
      name = fhdr["name"]

      if pending.has_key(name):
         pending[name] += 1
      else:
         pending[name] = 1
    
   for k, v in pending.items():
      if v > 1:
         print "error: only one %s package can be selected for comparison" % k
         sys.exit(2)

def returnHdrFromFile(package):
   """Pass a file pathname and get back an rpm.hdr object or None depending on
      if the file is a valid RPM or not. In the case of an invalid RPM, an
      error message describing the problem will be displayed."""

   ts = rpm.TransactionSet()
   try:
      fd = os.open(package, os.O_RDONLY)
   except OSError, error:
      print "error: could not open %s: %s (%s)" % (error.filename,
                                                   error.strerror,
                                                   errorcode[error.errno])
      return None

   try:
      hdr = ts.hdrFromFdno(fd)
   except:
      print "error: %s is corrupt, not an RPM, or this is a bug" % package
      return None

   if type(hdr) != rpm.hdr:
      print "error: RPM header from %s is not valid" % package
      return None

   os.close(fd)
   return hdr

def returnHdrFromDb(name):
   """Pass the name of an RPM and get back the rpm.hdr object or None depending
      on if the package is installed or not."""

   ts = rpm.TransactionSet()
   mi = ts.dbMatch("name", name)

   if mi.count() == 0:
      return None

   return mi.next()

def collectDivergence(filehdr, diskhdr):
   nvr = returnNameVerRel(filehdr, diskhdr)

   # XXX: dev RPM contains almost 20,000 files (devices) while most other RPMs
   # max out at a few hundred files. The first for loop is intense, but
   # depending on how Tripwire handles device entries, copying
   # filehdr["filenames"] and removing any devices might be a good prereq
   # instead of this hack.
   if filehdr["name"] == "dev":
      print "debug: skipping dev RPM since it sucks"
      return

   if diskhdr is not None:
      if options.verbosity:
         print "debug: processing upgrade of", filehdr["name"], "RPM"

      # During an upgrade, any files from the original header (disk) that
      # aren't in the new RPM (file) will be removed.
      for i in range(0, len(diskhdr["filenames"])):
         if diskhdr["filenames"][i] not in filehdr["filenames"]:
            print "%s - %s" % (nvr, diskhdr["filenames"][i])

      # Any files from the new RPM (file) that already exist on disk will show
      # up as a change but everything else will show up as a new file.
      for i in range(0, len(filehdr["filenames"])):
         if S_ISREG(filehdr["filemodes"][i]):
            filemd5hex = filehdr["filemd5s"][i]
            filemd5s64 = suck64(filemd5hex)
         else:
            if (not S_ISDIR(filehdr["filemodes"][i]) and
                not S_ISLNK(filehdr["filemodes"][i])):
               print "debug: skipping non-regular file", filehdr["filenames"][i], "during upgrade"
            continue

         file = filehdr["filenames"][i]
         try:
            st = os.lstat(file)
         except OSError, error:
            # ENOENT is fine since some files will be new and not exist on
            # disk, but I want to know about other errors.
            if error.errno != ENOENT:
               print "debug: stat failed for %s (%s)" % (file,
                                                         errorcode[error.errno])
            else:
               # ENOENT, so it's a new file
               print "%s + %s %s" % (nvr, filehdr["filenames"][i], filemd5s64)
               continue

         # stat worked, so md5sum the on-disk file and see if content changed
         diskmd5hex = md5sum(filehdr["filenames"][i])
         diskmd5s64 = suck64(diskmd5hex)
         if diskmd5hex != filemd5hex:
            print "%s @ %s %s" % (nvr, filehdr["filenames"][i], filemd5s64)

   else:
      if options.verbosity:
         print "debug: processing initial install of", filehdr["name"], "RPM"

      for i in range(0, len(filehdr["filenames"])):
         if S_ISREG(filehdr["filemodes"][i]):
            filemd5hex = filehdr["filemd5s"][i]
            filemd5s64 = suck64(filemd5hex)
            print "%s + %s %s" % (nvr, filehdr["filenames"][i], filemd5s64)
         else:
            if (not S_ISDIR(filehdr["filemodes"][i]) and
                not S_ISLNK(filehdr["filemodes"][i])):
               print "debug: skipping non-regular file", filehdr["filenames"][i], "during install"
            continue

def md5sum(file):
   """Returns an md5sum hex string of a file. Initial concept from a python.org
      mailing list post by Danny Yoo <dyoo@hkn.eecs.berkeley.edu>."""

   m = md5.new()
   f = open(file)

   while 1:
      bytes = f.read(1024)
      if not bytes: break
      m.update(bytes)

   return m.hexdigest()

def suck64(hex):
   """Pass a raw, 128-bit, binary MD5 digest and get back a 22-character string
      that Tripwire uses as generated by their broken base64 algorithm."""

   base64digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
   raw = binascii.unhexlify(hex)
   suck64 = ""

   numbits = len(raw) * 8
   offset = numbits % 6
   val = ord(raw[0])

   if offset:
     val = val >> (8 - offset)
     suck64 += base64digits[val & 0x1f]

   loops = 0
   virgin = True
   while 1:
      if numbits <= 0:
         break

      if virgin is True:
        numbits = numbits - offset
        virgin = False

      val = ord(raw[loops])

      if offset > 2:
         offset -= 8
         val = val << 8
         val |= ord(raw[loops + 1])
      else:
         loops -= 1

      val = val >> (2 - offset)
      suck64 += base64digits[val & 0x3f]

      numbits -= 6
      offset  += 6
      loops   += 1

   return suck64

def autoUpdate(autodld = True, autoget = []):
   auth       = "autodld:d0wnLOD3"
   site       = "current.registeredsite.com"
   path       = "/build/redhat-1.0TrueRHETest-i386/RedHat/RPMS"
   commonopts = "--noupdate --noinstall --url http://" + auth + "@" + site + path
   autodldcmd = "/usr/sbin/autodld" + " " + commonopts
   autogetcmd = "/usr/sbin/autoget" + " " + commonopts
   spooldirec = "/var/spool/autoupdate"

   commands  = []

   try:
      splat = os.listdir(spooldirec)
   except OSError, error:
      print "fatal: could not list contents of spool %s: %s" % (spooldirec,
                                                                error.strerror)
      sys.exit(5)

   if splat and (len(splat) > 1 or splat[0] != "autoprovides.db"):
      print "fatal: spool directory", spooldirec, "is not empty" 
      sys.exit(5)

   if autodld is not False:
      autodld = autodldcmd
      commands.append(autodld)
      if options.verbosity:
         print "debug:", autodld

   if autoget:
      autoget = autogetcmd + " " + string.join(autoget, " ")
      commands.append(autoget)
      if options.verbosity:
         print "debug:", autoget

   for command in commands:
      prog = popen2.Popen4(command)
      retv = prog.wait() >> 8
      outp = prog.fromchild.readlines()

      if retv != 0:
         print "fatal: autoupdate failed (%s)" % command
         print "debug:"
         for chunk in outp:
            print "       >>>", chunk,
         sys.exit(5)

   return glob.glob(spooldirec + "/*.rpm")

def main():
   global options
   autoget = []
   local = []

   usage = "usage: %prog [-dv] [spam eggs /tmp/ham-1.0-1.rpm ...]"

   parser = optparse.OptionParser(usage)

   parser.add_option("-d", dest = "autodld", action = "store_false",
                           help = "do not use autodld(8) to download newer RPMs")

   parser.add_option("-v", dest = "verbosity", action = "count",
                           help = "use up to three times for possibly more \
                           verbose output")

   summary = optparse.OptionGroup(parser, "summary",
            ("By default, this program will use autodld(8) to download updated "
             "RPMs from the configured RPM distribution server. Any following "
             "arguments that end in .rpm will be treated as local files and "
             "the remaining arguments will be passed to autoget(8) before the "
             "entire collection of RPMs is processed. All RPMs downloaded by "
             "the autoupdate suite will be deleted from disk when this program "
             "finishes."))

   parser.add_option_group(summary)

   options, args = parser.parse_args()

   for i in args:
      if i[-4:] == ".rpm":
         local.append(i)
      else:
         autoget.append(i)

   files = autoUpdate(options.autodld, autoget)
   files = files + local

   verifyArgs(files)
   for file in files:
      filehdr = returnHdrFromFile(file)
      diskhdr = returnHdrFromDb(filehdr["name"])
      collectDivergence(filehdr, diskhdr)

   for file in files:
      if file in local:
         if options.verbosity:
            print "debug: skipping removal of", file
         continue
      else:
         if options.verbosity:
            print "debug: removing", file
      try:
         os.remove(file)
      except OSError, error:
         print "warning: could not remove %s: %s" % (file, error.strerror)

if __name__ == "__main__":
   main()
